from reportlab.platypus import BaseDocTemplate, Frame, PageTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.platypus.flowables import KeepTogether
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import cm

from quinyx_py import Quinyx
from keys import USERNAME, PASSWORD
import random
import colorsys
import datetime

from hashlib import md5
import json


PAGE_HEIGHT = A4[1]
PAGE_WIDTH = A4[0]
STYLE_SHEET = getSampleStyleSheet()


def first_page(canvas, doc):
    canvas.saveState()
    canvas.setFont("Helvetica", 10)
    canvas.drawString(1.3 * cm, PAGE_HEIGHT * 0.94, "Generated on {}".format(datetime.date.today().isoformat()))
    canvas.restoreState()


def parse_schedule(schedule):
    days = {}
    for shift in schedule:
        date = datetime.date.fromisoformat(shift["startDate"][0:10])
        is_graduate = True if "Graduate" in shift["categoryName"] else False
        try:
            staff_name = shift["employee"]["givenName"]
        except KeyError:
            print("KeyError! Shift: {}".format(shift))
            continue
        staff_id = shift["employee"]["id"]

        if date not in days.keys():
            days[date] = Day(date)

        days[date].add_staff(Staff(staff_name, staff_id, is_graduate))

    return days


class Staff:
    def __init__(self, staff_name, staff_id, is_graduate):
        self.color = Staff.rl_color_from_id(int(staff_id))
        self.staff_name = staff_name
        self.staff_id = staff_id
        self.is_graduate = is_graduate

    @staticmethod
    def rl_color_from_id(staff_id):
        offset = 0  # stylistic purposes only
        instance = random.Random(staff_id + offset)
        h = instance.random()
        l = instance.triangular(0.6, 0.8, 0.75)
        s = instance.triangular(0.3, 0.95, 0.8)
        r, g, b = colorsys.hls_to_rgb(h, l, s)
        h_r = hex(round(r*255))[2:]
        h_g = hex(round(g*255))[2:]
        h_b = hex(round(b*255))[2:]

        return colors.HexColor("#{}{}{}".format(h_r, h_g, h_b))


class Day:
    def __init__(self, date):
        self.date = date
        self.staff = {}

    def __repr__(self):
        return "<Day object: {}>".format(self.date.isoformat())

    def add_staff(self, staff):
        if staff.staff_id not in self.staff:
            self.staff[staff.staff_id] = staff


def build_single_table(days):
    # ASSUMES DAYS IS ALWAYS LENGTH 6 STARTING ON MONDAY ENDING SATURDAY
    output = []
    day_strings = ["Mon", "Tue", "Wed", "Thurs", "Fri", "Sat", "Sun"]

    header = [""]

    body = [Paragraph(days[0].date.strftime("Week of %d %b"), STYLE_SHEET["BodyText"])]
    for day in days:
        header.append(Paragraph(day_strings[day.date.weekday()], STYLE_SHEET["BodyText"]))

        # first row is always the date
        temp_table_data = [[Paragraph("<para alignment=right>{}</para>".format(day.date.day), STYLE_SHEET["BodyText"])]]

        # loop over any staff in the Day object and append them
        for staff_id, staff in day.staff.items():
            temp_table_data.append([Paragraph("<para bgColor={}>&nbsp;{}</para>".format(staff.color, staff.staff_name),
                                              STYLE_SHEET["BodyText"])])

        table = Table(temp_table_data)
        table.setStyle(TableStyle([('LEFTPADDING', (0, 0), (-1, -1), 1), ('RIGHTPADDING', (0, 0), (-1, -1), 1),
                                   ('TOPPADDING', (0, 0), (-1, -1), 1), ('BOTTOMPADDING', (0, 0), (-1, -1), 1),
                                   ]))
        body.append(table)

    output.append(header)
    output.append(body)

    output_table = Table(output, colWidths=[2 * cm, None, None, None, None, None, None])
    output_table.setStyle(
        TableStyle([('VALIGN', (0, 1), (-1, -1), 'TOP'), ('GRID', (0, 1), (-1, -1), 1, colors.black),
                    ('BACKGROUND', (0, 1), (0, -1), colors.HexColor("#93aced3F", hasAlpha=True)),
                    ('BACKGROUND', (1, 0), (-1, 0), colors.HexColor("#93aced3F", hasAlpha=True)),
                    ]))
    return output_table


def build_doc(data):
    # ===== set up doc template
    doc = BaseDocTemplate('Orrell Park Vet Schedule.pdf')
    frame = Frame(1 * cm, 3 * cm, PAGE_WIDTH - 2 * cm, PAGE_HEIGHT - 6 * cm, id="first")
    doc.addPageTemplates([PageTemplate(id="firstpage", frames=frame, onPage=first_page)])

    # ===== set up flowables
    flowables = []

    # ===== set up header
    paragraph_1 = Paragraph("Orrell Park Vets", STYLE_SHEET["h1"])
    paragraph_2 = Paragraph("This schedule was autogenerated and may not be up to date.",
                            STYLE_SHEET["BodyText"])
    # "Check Quinyx for accurate scheduling."

    flowables.append(paragraph_1)
    flowables.append(paragraph_2)
    flowables.append(Spacer(1 * cm, 1 * cm))

    # ===== start loading data
    # with open('schedule.json') as f:
    #     data = json.load(f)

    # get a dict where keys are datetime objects and values are Day objects
    all_schedule_days = parse_schedule(data)

    # weeks is a dict where key is a date ordinal and value is a list of length 6 (mon to sat)
    # where each element in the list is a Day object
    weeks = {}

    for key, value in all_schedule_days.items():
        # Generate a date id (i.e. a date ordinal) to be used to keep track of weeks starting on Monday -- sortable
        # date_id is always a Monday and represents the week starting that Monday
        date_id = (key - datetime.timedelta(days=key.weekday())).toordinal()

        if date_id not in weeks.keys():  # initialise a new week list to hold Day objects
            weeks[date_id] = [None] * 6

        # noinspection PyTypeChecker
        weeks[date_id][key.weekday()] = value

    for key, value in weeks.items():
        # key is a date id -- i.e. a ordinal
        # this loop fills in gaps with blank Days
        for i in range(len(value)):
            if value[i] is None:
                value[i] = Day(datetime.date.fromordinal(key) + datetime.timedelta(days=i))

    build_list = sorted(weeks)

    # test hashes
    # this doesnt work
    # print(md5(json.dumps(build_list).encode()).hexdigest())
    # d1564511825f53bcfd18d92e9e563abf

    for week_id in build_list:
        flowables.append(KeepTogether(build_single_table(weeks[week_id])))
        flowables.append(Spacer(0.5*cm, 0.5*cm))

    doc.build(flowables)
    print("doc built!")


app = Quinyx()

app.login(USERNAME, PASSWORD)
schedule = app.get_schedule()
print(schedule)
print(md5(json.dumps(schedule).encode()).hexdigest())

# fd6159cdb688f0739fdd73a04d29ab81
build_doc(schedule)
